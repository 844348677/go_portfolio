Microservice Frameworks

the most popular frameworks for building microservices and
look at an example project to see the implementation

What make a good microservice framework

Ability to interface with other frameworks :
it must be possible to interact with any service build with the framework to interact with any service built with the framework by clients who are no built using the same framework

    Implement standards :
    a standard message protocal should be used to maximize interation , for example:
        JSON-RPC
        Thrift
        Protocol Buffers
        JSON
    Open :
    the framework should be open in both the source code and the roadmap
Patterns :
the framework must implement the standard patterns of microservice architecture
    Circuit breaking :
    client calls to downstream services must implement circuit breaking
    Service discovery :
    it must be capable of registering with a dynamic service registry and capable of query the same registry to locate connected services
    Proprietary :
    proprietary service registary must be open and usable from other clients who do not implement the framework or its SDKs
    Timeouts :
    downstream client calls should be configurable with a user determind timeout
    Health checks :
    The framework must create an automatic health check endpoint
    Routing :
    the framework must support multiple routes with an easy to use pattern based matching
    Middleware :
    the framework must support middleware to allow the user to create shared code for handlers
    Load balancing :
    downstream client connections should be capable of load balancing
    Language independence :
    the framework needs to be language independent to enable cross-team polyglot workflow. at a minimum , it should be possible to create client SDKs in multiple languages
Communication Protocols :
the service should support good standards in one of the following communication protocols
    REST :
    if the framework implements REST, it must take full advantage of semantic API design with appropriate use of HTTP verbs and status codes
    RPC :
    If the framework is RPC-based, it must use a standard and open messaging protocol
Maintainable :
the frameworkd must be maintainable with the minimum effort
    Easy to update :
    it must be easy to update with the minimum amount of code changes
    Well versioned :
    the framework must be well versioned with breaking changes to the API mainly restricted to major version updates
Tooling :
there must be adequate tooling to fit with modern development practices
    CI/CD :
    it must integrate and work well with continuous integration and continuous deployment pipelines , the tooling must be scriptable
    Cross-platform :
    the tools must work cross-platform , with OSX , and Linux as a bare minimum
Code generation :
it should support code generation templates to scaffold a service and possibly extend the service
Fast set up :
the framework should be fast to se up and with the minimum number of steps and dependencies
Ease of use :
Any good framework should be easy to use ; you will not thank yourself for choosing a framewrokd which is a pain to wrok with. this category has been broken down into the following subcategories
Extensible :
whe required , the user should be able to extend the framework through
    Plugins :
    a pluggable software architecture to be able to create generators and tmeplates
    Middleware:
    extension through handler middleware
Support :
a good support network is incredibly important throughout the life cycle of the service
    Maintained :
    the framework must be well maintained with
        Regular updates:
        the framework is regularly updated and released
        Accept pull requests
        the author accepts pull request from community contributros
        Corporate sponsor :
        while this option is not essential , a corporate sponsor can extend the life cycle of a framework as there is less likelihood of a leftpad situation
    Documentaition :
    the framework should be well documented with clear and concise example and comprehensive API documentation
        Easy to follow :
        documentation should be accessible and easy to read
     Code samples :
        adequate code examples should be provided to support a developer using the framework
    Tutorials :
    the framework will ideally have community contributed tutorials in both blog and video formats
    Community :
    there should be a healthy community using and supporting the framework with at least one of the following channels of communication
        Slack
        Gitter
        Github
        Mailing lit
        Stack Overflow
Secure :
the framework should be secure and implement the latest industry standars:
    TLS :
    securing the endpoints of the framework using TLS should be possible
    OWASP :
    the framework should implement OWASP advisory
    Validation :
    reqeusts should be automatically validated based on rules implemented by message annotation
    Well patched :
    security vulnerabilities should be regularly assessed and patched
    Authentication / Authorization :
    the framework should implement a method of authentication and authorization such as the OAuth standard
Open source :
the framework should be open sourced and released under a license which allows forking and modification
    Community :
    these should be a good open source community following and contribution for the project
    Popular :
    the framework should be popular and commercially used
Quality
the code quality of the framework should be visible and of a high standard. community contributions should follow a published process and standard
    high test coverage :
    the coverage should be high and monitored; pull request should ensure adherence to coding standards
        Unit tests :
        high fast running unit tests are essential
        Behavioral/functional :
        ideally,the framework should implement behavioral and functional tests regarding the generated code and the build process
    Automated build :
    automated builds of the source code should be present and visible. pull request should run a automated build, and the state reported on the request
    Code quality :
    Automated code quality tools should be used and the results visible, for examples
            Coveralls
            Code Climate
            Sonar
    Standard language patterns :
    a standard method of writing the code taking account of the language level idioms is essential
    Efficient :
    the framework must produce code which is efficient when run
    Fast :
    the code must execute quickly and be designed for performance
    Low latency :
    request should be low latency
    Low memory :
    the service should be memory efficient
    Supports a large number of connections :
    it should support a significant number of concurrent connections

Micro
Micro by Asim Aslam
Micro is a pluggable RPC microservices framework supporting service discovery, load-balancing, synchronous and asynchronous communication and multiple message encoding formats
micro/go-micro

golang/protobuf
Installation
go get -u github.com/golang/protobuf/protoc-gen-go
protoc --version
libprotoc 2.6.1

Setup
Protocol Buffers
protocol buffer 3.0 install
安装
tar -xvf protobuf-all-3.6.0.tar.gz
cd protobuf-3.6.0/
./configure --prefix=/usr/local/protobuf
make
make check
make install
配置
sudo vim /etc/profile
    export PATH=$PATH:/usr/local/protobuf/bin/
    export PKG_CONFIG_PATH=/usr/local/protobuf/lib/pkgconfig/
source /etc/profile
sudo vim /etc/ld.so.conf
    /usr/local/protobuf/lib
ldconfig

whereis protoc
which protoc

vim .bashrc
    ####### add protobuf lib path ########
    #(动态库搜索路径) 程序加载运行期间查找动态链接库时指定除了系统默认路径之外的其他路径
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/protobuf/lib/
    #(静态库搜索路径) 程序编译期间查找动态链接库时指定查找共享库的路径
    export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/protobuf/lib/
    #执行程序搜索路径
    export PATH=$PATH:/usr/local/protobuf/bin/
    #c程序头文件搜索路径
    export C_INCLUDE_PATH=$C_INCLUDE_PATH:/usr/local/protobuf/include/
    #c++程序头文件搜索路径
    export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:/usr/local/protobuf/include/
    #pkg-config 路径
    export PKG_CONFIG_PATH=/usr/local/protobuf/lib/pkgconfig/
    ######################################
source .bashrc

https://github.com/google/protobuf/releases

系统安装的　protoc 版本低
算了　不卸载了　
３.6 用下面的
/usr/local/protobuf/bin/protoc

go get github.com/micro/protoc-gen-micro

pwd
/home/liuh/go/go_portfolio/building_microservices_with_go/src/ch06/gomicro/proto

生成文件
/usr/local/protobuf/bin/protoc --proto_path=$GOPATH/src:. --micro_out=. --go_out=. kittens.proto
/usr/local/protobuf/bin/protoc --proto_path=$GOPATH/src:. --go_out=. kittens.proto

it process the proto DSL file and outputs native language source files
All this is doing is allowing a strut to be serialized using the binary standard set out by Protocol Buffers

use this with Micro
main.go

// micro 文档
// https://micro.mu/docs/index.html

// go get -u github.com/micro/micro
// go get -v -u github.com/micro/micro

https://micro.mu/
consul 没安装　估计是这里有问题　待安装测试

Kite

Setup

go get -u -v github.com/koding/kite


gRPC
Protocol Buffers messaging protocol from Google
gRPC is  a cross-platform which uses HTTP/2 as the transport and Protocol Buffers as the message protocol
The intention behind the project was to build a framework which promotos good microservice design, concentrating on messages rather than distributed objects
gRPC is also optimized for the many network problems we face in microservice architecture
its ability to stream data between client and server

Setup
https://github.com/google/protobuf/releases

go get google.golang.org/grp
go get -u github.com/golang/protobuf/{proto,protoc-gen-go}

a Docker container which has all these packages (nicholasjackson/building-microservices-in-go)

docker run -it --rm nicholasjackson/building-microservices-in-go

Code generations
the beauty of gRPC is the code generation
we can generate all our client and server code
All we then have to do is to wire up our handlers which will deal with the business logic

service Kittens{
    rpc Hello(Request) returns(Response) {}
}
this is the service definition, which contains the contract for our handlers
proto DSL
command
protoc

protoc -I /proto /proto/kittens.proto --go_out=plugins=grpc:/proto

this will create our message and our service definations , and output them to the kittens.pb.go file

/usr/local/protobuf/bin/protoc -I . --proto_path=$GOPATH/src:. --go_out=plugins=grpc:. kittens.proto

// Summary