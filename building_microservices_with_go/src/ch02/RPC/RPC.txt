RPC APIs

RPC stands for remote procedure call
it is a method of exucuting a function or method on a remote machine
interface defination
SOAP , Thrift Protocal Buffers
make it easier to generate client and server stubs fro different technology stacks
using a DSL (domain specific language)
create application clients and serverrs
REST need to use HTTP as a transport layer
RPC is not bound by this constraint

JMI was tightly bound
quickly generate a client for your users

RPC API design
a good RESTful API
one of the main different : you may not be using HTTP as your transport
the benefits
using binary serialization is incredibly efficient on the network and
no longer have the tight coupling that RMI and CORBA enforced

RPC message frameworks

Gob

Thrift

Protocal Buffers
providing a DSL
generator (written in C) reads can can generate client and server stubs for over ten languages
pluggable architecture
not just RPC
they are coupled to the gRPC framework
gRPC uses protocal buffers as the method for serializing and de-serializing structured data
Protocal buffer service defination
service User{
    rpc CreateUser(User) return (Error){}
}
message User{
    required string name = 1;
    required int32 id = 2;
    optional string email = 3;
}
message Error{
    optional code int32 = 1
    optional detail string =2
}

JSON-RPC
a standard way of representing objects for RPC using JSON
removes the need to decode any proprietary binary protocal at the expense of transfer speed

Filtering

Versioning APIs
when you should version
Breaking changes include
Removing or renaming APIs or API parameters
Changing the type of an API parameter, for example , from integer to string
Changing to response code,error codes, or fault contracts
Changes to the behavior of an existing API

Things that do not involve a breaking change include
Adding parameter to a returned entity
Adding additional endpoints or functionality
Bug fixes or other  maintenance that does not include items in the breaking changes list

Semantic versioning

Version formats for REST APIs

Version formats for RPC

Naming for RPC
GET /v1/users
RPC method
Users.v1.Users
GET /v1/users/123434
Users.v1.User
GET /v1/users/12343/permissions/1232
Permissions.v1.Permission
DELETE /v1/users/123123
Users.v1.DeleteUser

Object type standardization
Many of the serialization packages Protocol Buffers such as protocol buffers and Thrift
that use stubs to generate client code will happily deal with serialization of simple types such as
Dates into native types that enable your consumer to easily use and manipulatee these objects

Dates
use the DataLiteral format and preferably the Iso8601Literal
Iso8601Literal
{"date":"2016-07-14T16:00Z"}
StucturedDateLiteral
{"date":{"kind":"U","value":1471186826}}

Durations
ISO 8601
P[n]Y[n]M[n]DT[n]H[n]M[n]S
P3Y6M4DT12H30M5S
represents a duration of "three years, six months, four days, twelve hours, thirty minutes, and five seconds"

Intervals
ISO 8601 specification
Start and end, such as 2007-03-01T13:00:00Z/2008-05-11T15:30:00Z
Start and duration, such as 2007-03-01T13:00:00Z/P1Y2M10DT2H30M
Duration and end, such as P1Y2M10DT2H30M/2008-05-11T15:30:00Z
Duration only, such a P1Y2M10DT2H30M, with additional context information

Documenting APIs

REST based-based APIs
Swagger
API Blueprint
RAML

RPC based-based APIs
your contract is your documentation



